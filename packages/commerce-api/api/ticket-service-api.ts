/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1ListTicketReply } from '../models';
// @ts-ignore
import { V1ListTicketRequest } from '../models';
// @ts-ignore
import { V1Ticket } from '../models';
/**
 * TicketServiceApi - axios parameter creator
 * @export
 */
export const TicketServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketServiceGetTicket: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketServiceGetTicket', 'id', id)
            const localVarPath = `/v1/ticketing/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterLocationId$eq] 
         * @param {string} [filterLocationId$neq] 
         * @param {string} [filterLocationId$contains] 
         * @param {string} [filterLocationId$startsWith] 
         * @param {string} [filterLocationId$nstartsWith] 
         * @param {string} [filterLocationId$endsWith] 
         * @param {string} [filterLocationId$nendsWith] 
         * @param {Array<string>} [filterLocationId$in] 
         * @param {Array<string>} [filterLocationId$nin] 
         * @param {boolean} [filterLocationId$null] 
         * @param {boolean} [filterLocationId$nnull] 
         * @param {boolean} [filterLocationId$empty] 
         * @param {boolean} [filterLocationId$nempty] 
         * @param {string} [filterLocationId$like] 
         * @param {string} [filterHallId$eq] 
         * @param {string} [filterHallId$neq] 
         * @param {string} [filterHallId$contains] 
         * @param {string} [filterHallId$startsWith] 
         * @param {string} [filterHallId$nstartsWith] 
         * @param {string} [filterHallId$endsWith] 
         * @param {string} [filterHallId$nendsWith] 
         * @param {Array<string>} [filterHallId$in] 
         * @param {Array<string>} [filterHallId$nin] 
         * @param {boolean} [filterHallId$null] 
         * @param {boolean} [filterHallId$nnull] 
         * @param {boolean} [filterHallId$empty] 
         * @param {boolean} [filterHallId$nempty] 
         * @param {string} [filterHallId$like] 
         * @param {string} [filterActivityId$eq] 
         * @param {string} [filterActivityId$neq] 
         * @param {string} [filterActivityId$contains] 
         * @param {string} [filterActivityId$startsWith] 
         * @param {string} [filterActivityId$nstartsWith] 
         * @param {string} [filterActivityId$endsWith] 
         * @param {string} [filterActivityId$nendsWith] 
         * @param {Array<string>} [filterActivityId$in] 
         * @param {Array<string>} [filterActivityId$nin] 
         * @param {boolean} [filterActivityId$null] 
         * @param {boolean} [filterActivityId$nnull] 
         * @param {boolean} [filterActivityId$empty] 
         * @param {boolean} [filterActivityId$nempty] 
         * @param {string} [filterActivityId$like] 
         * @param {string} [filterUserId$eq] 
         * @param {string} [filterUserId$neq] 
         * @param {string} [filterUserId$contains] 
         * @param {string} [filterUserId$startsWith] 
         * @param {string} [filterUserId$nstartsWith] 
         * @param {string} [filterUserId$endsWith] 
         * @param {string} [filterUserId$nendsWith] 
         * @param {Array<string>} [filterUserId$in] 
         * @param {Array<string>} [filterUserId$nin] 
         * @param {boolean} [filterUserId$null] 
         * @param {boolean} [filterUserId$nnull] 
         * @param {boolean} [filterUserId$empty] 
         * @param {boolean} [filterUserId$nempty] 
         * @param {string} [filterUserId$like] 
         * @param {string} [afterPageToken] 
         * @param {string} [beforePageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketServiceListTicket: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterLocationId$eq?: string, filterLocationId$neq?: string, filterLocationId$contains?: string, filterLocationId$startsWith?: string, filterLocationId$nstartsWith?: string, filterLocationId$endsWith?: string, filterLocationId$nendsWith?: string, filterLocationId$in?: Array<string>, filterLocationId$nin?: Array<string>, filterLocationId$null?: boolean, filterLocationId$nnull?: boolean, filterLocationId$empty?: boolean, filterLocationId$nempty?: boolean, filterLocationId$like?: string, filterHallId$eq?: string, filterHallId$neq?: string, filterHallId$contains?: string, filterHallId$startsWith?: string, filterHallId$nstartsWith?: string, filterHallId$endsWith?: string, filterHallId$nendsWith?: string, filterHallId$in?: Array<string>, filterHallId$nin?: Array<string>, filterHallId$null?: boolean, filterHallId$nnull?: boolean, filterHallId$empty?: boolean, filterHallId$nempty?: boolean, filterHallId$like?: string, filterActivityId$eq?: string, filterActivityId$neq?: string, filterActivityId$contains?: string, filterActivityId$startsWith?: string, filterActivityId$nstartsWith?: string, filterActivityId$endsWith?: string, filterActivityId$nendsWith?: string, filterActivityId$in?: Array<string>, filterActivityId$nin?: Array<string>, filterActivityId$null?: boolean, filterActivityId$nnull?: boolean, filterActivityId$empty?: boolean, filterActivityId$nempty?: boolean, filterActivityId$like?: string, filterUserId$eq?: string, filterUserId$neq?: string, filterUserId$contains?: string, filterUserId$startsWith?: string, filterUserId$nstartsWith?: string, filterUserId$endsWith?: string, filterUserId$nendsWith?: string, filterUserId$in?: Array<string>, filterUserId$nin?: Array<string>, filterUserId$null?: boolean, filterUserId$nnull?: boolean, filterUserId$empty?: boolean, filterUserId$nempty?: boolean, filterUserId$like?: string, afterPageToken?: string, beforePageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ticketing/ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterLocationId$eq !== undefined) {
                localVarQueryParameter['filter.locationId.$eq'] = filterLocationId$eq;
            }

            if (filterLocationId$neq !== undefined) {
                localVarQueryParameter['filter.locationId.$neq'] = filterLocationId$neq;
            }

            if (filterLocationId$contains !== undefined) {
                localVarQueryParameter['filter.locationId.$contains'] = filterLocationId$contains;
            }

            if (filterLocationId$startsWith !== undefined) {
                localVarQueryParameter['filter.locationId.$starts_with'] = filterLocationId$startsWith;
            }

            if (filterLocationId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.locationId.$nstarts_with'] = filterLocationId$nstartsWith;
            }

            if (filterLocationId$endsWith !== undefined) {
                localVarQueryParameter['filter.locationId.$ends_with'] = filterLocationId$endsWith;
            }

            if (filterLocationId$nendsWith !== undefined) {
                localVarQueryParameter['filter.locationId.$nends_with'] = filterLocationId$nendsWith;
            }

            if (filterLocationId$in) {
                localVarQueryParameter['filter.locationId.$in'] = filterLocationId$in;
            }

            if (filterLocationId$nin) {
                localVarQueryParameter['filter.locationId.$nin'] = filterLocationId$nin;
            }

            if (filterLocationId$null !== undefined) {
                localVarQueryParameter['filter.locationId.$null'] = filterLocationId$null;
            }

            if (filterLocationId$nnull !== undefined) {
                localVarQueryParameter['filter.locationId.$nnull'] = filterLocationId$nnull;
            }

            if (filterLocationId$empty !== undefined) {
                localVarQueryParameter['filter.locationId.$empty'] = filterLocationId$empty;
            }

            if (filterLocationId$nempty !== undefined) {
                localVarQueryParameter['filter.locationId.$nempty'] = filterLocationId$nempty;
            }

            if (filterLocationId$like !== undefined) {
                localVarQueryParameter['filter.locationId.$like'] = filterLocationId$like;
            }

            if (filterHallId$eq !== undefined) {
                localVarQueryParameter['filter.hallId.$eq'] = filterHallId$eq;
            }

            if (filterHallId$neq !== undefined) {
                localVarQueryParameter['filter.hallId.$neq'] = filterHallId$neq;
            }

            if (filterHallId$contains !== undefined) {
                localVarQueryParameter['filter.hallId.$contains'] = filterHallId$contains;
            }

            if (filterHallId$startsWith !== undefined) {
                localVarQueryParameter['filter.hallId.$starts_with'] = filterHallId$startsWith;
            }

            if (filterHallId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.hallId.$nstarts_with'] = filterHallId$nstartsWith;
            }

            if (filterHallId$endsWith !== undefined) {
                localVarQueryParameter['filter.hallId.$ends_with'] = filterHallId$endsWith;
            }

            if (filterHallId$nendsWith !== undefined) {
                localVarQueryParameter['filter.hallId.$nends_with'] = filterHallId$nendsWith;
            }

            if (filterHallId$in) {
                localVarQueryParameter['filter.hallId.$in'] = filterHallId$in;
            }

            if (filterHallId$nin) {
                localVarQueryParameter['filter.hallId.$nin'] = filterHallId$nin;
            }

            if (filterHallId$null !== undefined) {
                localVarQueryParameter['filter.hallId.$null'] = filterHallId$null;
            }

            if (filterHallId$nnull !== undefined) {
                localVarQueryParameter['filter.hallId.$nnull'] = filterHallId$nnull;
            }

            if (filterHallId$empty !== undefined) {
                localVarQueryParameter['filter.hallId.$empty'] = filterHallId$empty;
            }

            if (filterHallId$nempty !== undefined) {
                localVarQueryParameter['filter.hallId.$nempty'] = filterHallId$nempty;
            }

            if (filterHallId$like !== undefined) {
                localVarQueryParameter['filter.hallId.$like'] = filterHallId$like;
            }

            if (filterActivityId$eq !== undefined) {
                localVarQueryParameter['filter.activityId.$eq'] = filterActivityId$eq;
            }

            if (filterActivityId$neq !== undefined) {
                localVarQueryParameter['filter.activityId.$neq'] = filterActivityId$neq;
            }

            if (filterActivityId$contains !== undefined) {
                localVarQueryParameter['filter.activityId.$contains'] = filterActivityId$contains;
            }

            if (filterActivityId$startsWith !== undefined) {
                localVarQueryParameter['filter.activityId.$starts_with'] = filterActivityId$startsWith;
            }

            if (filterActivityId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.activityId.$nstarts_with'] = filterActivityId$nstartsWith;
            }

            if (filterActivityId$endsWith !== undefined) {
                localVarQueryParameter['filter.activityId.$ends_with'] = filterActivityId$endsWith;
            }

            if (filterActivityId$nendsWith !== undefined) {
                localVarQueryParameter['filter.activityId.$nends_with'] = filterActivityId$nendsWith;
            }

            if (filterActivityId$in) {
                localVarQueryParameter['filter.activityId.$in'] = filterActivityId$in;
            }

            if (filterActivityId$nin) {
                localVarQueryParameter['filter.activityId.$nin'] = filterActivityId$nin;
            }

            if (filterActivityId$null !== undefined) {
                localVarQueryParameter['filter.activityId.$null'] = filterActivityId$null;
            }

            if (filterActivityId$nnull !== undefined) {
                localVarQueryParameter['filter.activityId.$nnull'] = filterActivityId$nnull;
            }

            if (filterActivityId$empty !== undefined) {
                localVarQueryParameter['filter.activityId.$empty'] = filterActivityId$empty;
            }

            if (filterActivityId$nempty !== undefined) {
                localVarQueryParameter['filter.activityId.$nempty'] = filterActivityId$nempty;
            }

            if (filterActivityId$like !== undefined) {
                localVarQueryParameter['filter.activityId.$like'] = filterActivityId$like;
            }

            if (filterUserId$eq !== undefined) {
                localVarQueryParameter['filter.userId.$eq'] = filterUserId$eq;
            }

            if (filterUserId$neq !== undefined) {
                localVarQueryParameter['filter.userId.$neq'] = filterUserId$neq;
            }

            if (filterUserId$contains !== undefined) {
                localVarQueryParameter['filter.userId.$contains'] = filterUserId$contains;
            }

            if (filterUserId$startsWith !== undefined) {
                localVarQueryParameter['filter.userId.$starts_with'] = filterUserId$startsWith;
            }

            if (filterUserId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.userId.$nstarts_with'] = filterUserId$nstartsWith;
            }

            if (filterUserId$endsWith !== undefined) {
                localVarQueryParameter['filter.userId.$ends_with'] = filterUserId$endsWith;
            }

            if (filterUserId$nendsWith !== undefined) {
                localVarQueryParameter['filter.userId.$nends_with'] = filterUserId$nendsWith;
            }

            if (filterUserId$in) {
                localVarQueryParameter['filter.userId.$in'] = filterUserId$in;
            }

            if (filterUserId$nin) {
                localVarQueryParameter['filter.userId.$nin'] = filterUserId$nin;
            }

            if (filterUserId$null !== undefined) {
                localVarQueryParameter['filter.userId.$null'] = filterUserId$null;
            }

            if (filterUserId$nnull !== undefined) {
                localVarQueryParameter['filter.userId.$nnull'] = filterUserId$nnull;
            }

            if (filterUserId$empty !== undefined) {
                localVarQueryParameter['filter.userId.$empty'] = filterUserId$empty;
            }

            if (filterUserId$nempty !== undefined) {
                localVarQueryParameter['filter.userId.$nempty'] = filterUserId$nempty;
            }

            if (filterUserId$like !== undefined) {
                localVarQueryParameter['filter.userId.$like'] = filterUserId$like;
            }

            if (afterPageToken !== undefined) {
                localVarQueryParameter['afterPageToken'] = afterPageToken;
            }

            if (beforePageToken !== undefined) {
                localVarQueryParameter['beforePageToken'] = beforePageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListTicketRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketServiceListTicket2: async (body: V1ListTicketRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketServiceListTicket2', 'body', body)
            const localVarPath = `/v1/ticketing/ticket/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketServiceApi - functional programming interface
 * @export
 */
export const TicketServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketServiceGetTicket(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketServiceGetTicket(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterLocationId$eq] 
         * @param {string} [filterLocationId$neq] 
         * @param {string} [filterLocationId$contains] 
         * @param {string} [filterLocationId$startsWith] 
         * @param {string} [filterLocationId$nstartsWith] 
         * @param {string} [filterLocationId$endsWith] 
         * @param {string} [filterLocationId$nendsWith] 
         * @param {Array<string>} [filterLocationId$in] 
         * @param {Array<string>} [filterLocationId$nin] 
         * @param {boolean} [filterLocationId$null] 
         * @param {boolean} [filterLocationId$nnull] 
         * @param {boolean} [filterLocationId$empty] 
         * @param {boolean} [filterLocationId$nempty] 
         * @param {string} [filterLocationId$like] 
         * @param {string} [filterHallId$eq] 
         * @param {string} [filterHallId$neq] 
         * @param {string} [filterHallId$contains] 
         * @param {string} [filterHallId$startsWith] 
         * @param {string} [filterHallId$nstartsWith] 
         * @param {string} [filterHallId$endsWith] 
         * @param {string} [filterHallId$nendsWith] 
         * @param {Array<string>} [filterHallId$in] 
         * @param {Array<string>} [filterHallId$nin] 
         * @param {boolean} [filterHallId$null] 
         * @param {boolean} [filterHallId$nnull] 
         * @param {boolean} [filterHallId$empty] 
         * @param {boolean} [filterHallId$nempty] 
         * @param {string} [filterHallId$like] 
         * @param {string} [filterActivityId$eq] 
         * @param {string} [filterActivityId$neq] 
         * @param {string} [filterActivityId$contains] 
         * @param {string} [filterActivityId$startsWith] 
         * @param {string} [filterActivityId$nstartsWith] 
         * @param {string} [filterActivityId$endsWith] 
         * @param {string} [filterActivityId$nendsWith] 
         * @param {Array<string>} [filterActivityId$in] 
         * @param {Array<string>} [filterActivityId$nin] 
         * @param {boolean} [filterActivityId$null] 
         * @param {boolean} [filterActivityId$nnull] 
         * @param {boolean} [filterActivityId$empty] 
         * @param {boolean} [filterActivityId$nempty] 
         * @param {string} [filterActivityId$like] 
         * @param {string} [filterUserId$eq] 
         * @param {string} [filterUserId$neq] 
         * @param {string} [filterUserId$contains] 
         * @param {string} [filterUserId$startsWith] 
         * @param {string} [filterUserId$nstartsWith] 
         * @param {string} [filterUserId$endsWith] 
         * @param {string} [filterUserId$nendsWith] 
         * @param {Array<string>} [filterUserId$in] 
         * @param {Array<string>} [filterUserId$nin] 
         * @param {boolean} [filterUserId$null] 
         * @param {boolean} [filterUserId$nnull] 
         * @param {boolean} [filterUserId$empty] 
         * @param {boolean} [filterUserId$nempty] 
         * @param {string} [filterUserId$like] 
         * @param {string} [afterPageToken] 
         * @param {string} [beforePageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketServiceListTicket(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterLocationId$eq?: string, filterLocationId$neq?: string, filterLocationId$contains?: string, filterLocationId$startsWith?: string, filterLocationId$nstartsWith?: string, filterLocationId$endsWith?: string, filterLocationId$nendsWith?: string, filterLocationId$in?: Array<string>, filterLocationId$nin?: Array<string>, filterLocationId$null?: boolean, filterLocationId$nnull?: boolean, filterLocationId$empty?: boolean, filterLocationId$nempty?: boolean, filterLocationId$like?: string, filterHallId$eq?: string, filterHallId$neq?: string, filterHallId$contains?: string, filterHallId$startsWith?: string, filterHallId$nstartsWith?: string, filterHallId$endsWith?: string, filterHallId$nendsWith?: string, filterHallId$in?: Array<string>, filterHallId$nin?: Array<string>, filterHallId$null?: boolean, filterHallId$nnull?: boolean, filterHallId$empty?: boolean, filterHallId$nempty?: boolean, filterHallId$like?: string, filterActivityId$eq?: string, filterActivityId$neq?: string, filterActivityId$contains?: string, filterActivityId$startsWith?: string, filterActivityId$nstartsWith?: string, filterActivityId$endsWith?: string, filterActivityId$nendsWith?: string, filterActivityId$in?: Array<string>, filterActivityId$nin?: Array<string>, filterActivityId$null?: boolean, filterActivityId$nnull?: boolean, filterActivityId$empty?: boolean, filterActivityId$nempty?: boolean, filterActivityId$like?: string, filterUserId$eq?: string, filterUserId$neq?: string, filterUserId$contains?: string, filterUserId$startsWith?: string, filterUserId$nstartsWith?: string, filterUserId$endsWith?: string, filterUserId$nendsWith?: string, filterUserId$in?: Array<string>, filterUserId$nin?: Array<string>, filterUserId$null?: boolean, filterUserId$nnull?: boolean, filterUserId$empty?: boolean, filterUserId$nempty?: boolean, filterUserId$like?: string, afterPageToken?: string, beforePageToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTicketReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketServiceListTicket(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterLocationId$eq, filterLocationId$neq, filterLocationId$contains, filterLocationId$startsWith, filterLocationId$nstartsWith, filterLocationId$endsWith, filterLocationId$nendsWith, filterLocationId$in, filterLocationId$nin, filterLocationId$null, filterLocationId$nnull, filterLocationId$empty, filterLocationId$nempty, filterLocationId$like, filterHallId$eq, filterHallId$neq, filterHallId$contains, filterHallId$startsWith, filterHallId$nstartsWith, filterHallId$endsWith, filterHallId$nendsWith, filterHallId$in, filterHallId$nin, filterHallId$null, filterHallId$nnull, filterHallId$empty, filterHallId$nempty, filterHallId$like, filterActivityId$eq, filterActivityId$neq, filterActivityId$contains, filterActivityId$startsWith, filterActivityId$nstartsWith, filterActivityId$endsWith, filterActivityId$nendsWith, filterActivityId$in, filterActivityId$nin, filterActivityId$null, filterActivityId$nnull, filterActivityId$empty, filterActivityId$nempty, filterActivityId$like, filterUserId$eq, filterUserId$neq, filterUserId$contains, filterUserId$startsWith, filterUserId$nstartsWith, filterUserId$endsWith, filterUserId$nendsWith, filterUserId$in, filterUserId$nin, filterUserId$null, filterUserId$nnull, filterUserId$empty, filterUserId$nempty, filterUserId$like, afterPageToken, beforePageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1ListTicketRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketServiceListTicket2(body: V1ListTicketRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTicketReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketServiceListTicket2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketServiceApi - factory interface
 * @export
 */
export const TicketServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {TicketServiceApiTicketServiceGetTicketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketServiceGetTicket(requestParameters: TicketServiceApiTicketServiceGetTicketRequest, options?: AxiosRequestConfig): AxiosPromise<V1Ticket> {
            return localVarFp.ticketServiceGetTicket(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketServiceApiTicketServiceListTicketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketServiceListTicket(requestParameters: TicketServiceApiTicketServiceListTicketRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListTicketReply> {
            return localVarFp.ticketServiceListTicket(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterLocationId$eq, requestParameters.filterLocationId$neq, requestParameters.filterLocationId$contains, requestParameters.filterLocationId$startsWith, requestParameters.filterLocationId$nstartsWith, requestParameters.filterLocationId$endsWith, requestParameters.filterLocationId$nendsWith, requestParameters.filterLocationId$in, requestParameters.filterLocationId$nin, requestParameters.filterLocationId$null, requestParameters.filterLocationId$nnull, requestParameters.filterLocationId$empty, requestParameters.filterLocationId$nempty, requestParameters.filterLocationId$like, requestParameters.filterHallId$eq, requestParameters.filterHallId$neq, requestParameters.filterHallId$contains, requestParameters.filterHallId$startsWith, requestParameters.filterHallId$nstartsWith, requestParameters.filterHallId$endsWith, requestParameters.filterHallId$nendsWith, requestParameters.filterHallId$in, requestParameters.filterHallId$nin, requestParameters.filterHallId$null, requestParameters.filterHallId$nnull, requestParameters.filterHallId$empty, requestParameters.filterHallId$nempty, requestParameters.filterHallId$like, requestParameters.filterActivityId$eq, requestParameters.filterActivityId$neq, requestParameters.filterActivityId$contains, requestParameters.filterActivityId$startsWith, requestParameters.filterActivityId$nstartsWith, requestParameters.filterActivityId$endsWith, requestParameters.filterActivityId$nendsWith, requestParameters.filterActivityId$in, requestParameters.filterActivityId$nin, requestParameters.filterActivityId$null, requestParameters.filterActivityId$nnull, requestParameters.filterActivityId$empty, requestParameters.filterActivityId$nempty, requestParameters.filterActivityId$like, requestParameters.filterUserId$eq, requestParameters.filterUserId$neq, requestParameters.filterUserId$contains, requestParameters.filterUserId$startsWith, requestParameters.filterUserId$nstartsWith, requestParameters.filterUserId$endsWith, requestParameters.filterUserId$nendsWith, requestParameters.filterUserId$in, requestParameters.filterUserId$nin, requestParameters.filterUserId$null, requestParameters.filterUserId$nnull, requestParameters.filterUserId$empty, requestParameters.filterUserId$nempty, requestParameters.filterUserId$like, requestParameters.afterPageToken, requestParameters.beforePageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketServiceApiTicketServiceListTicket2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketServiceListTicket2(requestParameters: TicketServiceApiTicketServiceListTicket2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListTicketReply> {
            return localVarFp.ticketServiceListTicket2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ticketServiceGetTicket operation in TicketServiceApi.
 * @export
 * @interface TicketServiceApiTicketServiceGetTicketRequest
 */
export interface TicketServiceApiTicketServiceGetTicketRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceGetTicket
     */
    readonly id: string
}

/**
 * Request parameters for ticketServiceListTicket operation in TicketServiceApi.
 * @export
 * @interface TicketServiceApiTicketServiceListTicketRequest
 */
export interface TicketServiceApiTicketServiceListTicketRequest {
    /**
     * 
     * @type {number}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterLocationId$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterHallId$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterActivityId$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly filterUserId$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly afterPageToken?: string

    /**
     * 
     * @type {string}
     * @memberof TicketServiceApiTicketServiceListTicket
     */
    readonly beforePageToken?: string
}

/**
 * Request parameters for ticketServiceListTicket2 operation in TicketServiceApi.
 * @export
 * @interface TicketServiceApiTicketServiceListTicket2Request
 */
export interface TicketServiceApiTicketServiceListTicket2Request {
    /**
     * 
     * @type {V1ListTicketRequest}
     * @memberof TicketServiceApiTicketServiceListTicket2
     */
    readonly body: V1ListTicketRequest
}

/**
 * TicketServiceApi - object-oriented interface
 * @export
 * @class TicketServiceApi
 * @extends {BaseAPI}
 */
export class TicketServiceApi extends BaseAPI {
    /**
     * 
     * @param {TicketServiceApiTicketServiceGetTicketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketServiceApi
     */
    public ticketServiceGetTicket(requestParameters: TicketServiceApiTicketServiceGetTicketRequest, options?: AxiosRequestConfig) {
        return TicketServiceApiFp(this.configuration).ticketServiceGetTicket(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketServiceApiTicketServiceListTicketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketServiceApi
     */
    public ticketServiceListTicket(requestParameters: TicketServiceApiTicketServiceListTicketRequest = {}, options?: AxiosRequestConfig) {
        return TicketServiceApiFp(this.configuration).ticketServiceListTicket(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterLocationId$eq, requestParameters.filterLocationId$neq, requestParameters.filterLocationId$contains, requestParameters.filterLocationId$startsWith, requestParameters.filterLocationId$nstartsWith, requestParameters.filterLocationId$endsWith, requestParameters.filterLocationId$nendsWith, requestParameters.filterLocationId$in, requestParameters.filterLocationId$nin, requestParameters.filterLocationId$null, requestParameters.filterLocationId$nnull, requestParameters.filterLocationId$empty, requestParameters.filterLocationId$nempty, requestParameters.filterLocationId$like, requestParameters.filterHallId$eq, requestParameters.filterHallId$neq, requestParameters.filterHallId$contains, requestParameters.filterHallId$startsWith, requestParameters.filterHallId$nstartsWith, requestParameters.filterHallId$endsWith, requestParameters.filterHallId$nendsWith, requestParameters.filterHallId$in, requestParameters.filterHallId$nin, requestParameters.filterHallId$null, requestParameters.filterHallId$nnull, requestParameters.filterHallId$empty, requestParameters.filterHallId$nempty, requestParameters.filterHallId$like, requestParameters.filterActivityId$eq, requestParameters.filterActivityId$neq, requestParameters.filterActivityId$contains, requestParameters.filterActivityId$startsWith, requestParameters.filterActivityId$nstartsWith, requestParameters.filterActivityId$endsWith, requestParameters.filterActivityId$nendsWith, requestParameters.filterActivityId$in, requestParameters.filterActivityId$nin, requestParameters.filterActivityId$null, requestParameters.filterActivityId$nnull, requestParameters.filterActivityId$empty, requestParameters.filterActivityId$nempty, requestParameters.filterActivityId$like, requestParameters.filterUserId$eq, requestParameters.filterUserId$neq, requestParameters.filterUserId$contains, requestParameters.filterUserId$startsWith, requestParameters.filterUserId$nstartsWith, requestParameters.filterUserId$endsWith, requestParameters.filterUserId$nendsWith, requestParameters.filterUserId$in, requestParameters.filterUserId$nin, requestParameters.filterUserId$null, requestParameters.filterUserId$nnull, requestParameters.filterUserId$empty, requestParameters.filterUserId$nempty, requestParameters.filterUserId$like, requestParameters.afterPageToken, requestParameters.beforePageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketServiceApiTicketServiceListTicket2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketServiceApi
     */
    public ticketServiceListTicket2(requestParameters: TicketServiceApiTicketServiceListTicket2Request, options?: AxiosRequestConfig) {
        return TicketServiceApiFp(this.configuration).ticketServiceListTicket2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
