/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1CreateStripePaymentIntentReply } from '../models';
// @ts-ignore
import { V1CreateStripePaymentIntentRequest } from '../models';
/**
 * StripePaymentGatewayServiceApi - axios parameter creator
 * @export
 */
export const StripePaymentGatewayServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateStripePaymentIntentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripePaymentGatewayServiceCreateStripePaymentIntent: async (body: V1CreateStripePaymentIntentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('stripePaymentGatewayServiceCreateStripePaymentIntent', 'body', body)
            const localVarPath = `/v1/payment/stripe/intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripePaymentGatewayServiceStripeWebhook: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('stripePaymentGatewayServiceStripeWebhook', 'body', body)
            const localVarPath = `/v1/payment/stripe/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripePaymentGatewayServiceApi - functional programming interface
 * @export
 */
export const StripePaymentGatewayServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StripePaymentGatewayServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateStripePaymentIntentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripePaymentGatewayServiceCreateStripePaymentIntent(body: V1CreateStripePaymentIntentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateStripePaymentIntentReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripePaymentGatewayServiceCreateStripePaymentIntent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripePaymentGatewayServiceStripeWebhook(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripePaymentGatewayServiceStripeWebhook(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StripePaymentGatewayServiceApi - factory interface
 * @export
 */
export const StripePaymentGatewayServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StripePaymentGatewayServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripePaymentGatewayServiceCreateStripePaymentIntent(requestParameters: StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<V1CreateStripePaymentIntentReply> {
            return localVarFp.stripePaymentGatewayServiceCreateStripePaymentIntent(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripePaymentGatewayServiceStripeWebhook(requestParameters: StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.stripePaymentGatewayServiceStripeWebhook(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for stripePaymentGatewayServiceCreateStripePaymentIntent operation in StripePaymentGatewayServiceApi.
 * @export
 * @interface StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntentRequest
 */
export interface StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntentRequest {
    /**
     * 
     * @type {V1CreateStripePaymentIntentRequest}
     * @memberof StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntent
     */
    readonly body: V1CreateStripePaymentIntentRequest
}

/**
 * Request parameters for stripePaymentGatewayServiceStripeWebhook operation in StripePaymentGatewayServiceApi.
 * @export
 * @interface StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhookRequest
 */
export interface StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhookRequest {
    /**
     * 
     * @type {object}
     * @memberof StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhook
     */
    readonly body: object
}

/**
 * StripePaymentGatewayServiceApi - object-oriented interface
 * @export
 * @class StripePaymentGatewayServiceApi
 * @extends {BaseAPI}
 */
export class StripePaymentGatewayServiceApi extends BaseAPI {
    /**
     * 
     * @param {StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripePaymentGatewayServiceApi
     */
    public stripePaymentGatewayServiceCreateStripePaymentIntent(requestParameters: StripePaymentGatewayServiceApiStripePaymentGatewayServiceCreateStripePaymentIntentRequest, options?: AxiosRequestConfig) {
        return StripePaymentGatewayServiceApiFp(this.configuration).stripePaymentGatewayServiceCreateStripePaymentIntent(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripePaymentGatewayServiceApi
     */
    public stripePaymentGatewayServiceStripeWebhook(requestParameters: StripePaymentGatewayServiceApiStripePaymentGatewayServiceStripeWebhookRequest, options?: AxiosRequestConfig) {
        return StripePaymentGatewayServiceApiFp(this.configuration).stripePaymentGatewayServiceStripeWebhook(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
