/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { TicketingBannerServiceUpdateBannerRequest } from '../models';
// @ts-ignore
import { V1Banner } from '../models';
// @ts-ignore
import { V1CreateBannerRequest } from '../models';
// @ts-ignore
import { V1DeleteBannerReply } from '../models';
// @ts-ignore
import { V1ListBannerReply } from '../models';
// @ts-ignore
import { V1ListBannerRequest } from '../models';
/**
 * TicketingBannerServiceApi - axios parameter creator
 * @export
 */
export const TicketingBannerServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceCreateBanner: async (body: V1CreateBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingBannerServiceCreateBanner', 'body', body)
            const localVarPath = `/v1/ticketing/banner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceDeleteBanner: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketingBannerServiceDeleteBanner', 'id', id)
            const localVarPath = `/v1/ticketing/banner/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterStatus$eq] 
         * @param {string} [filterStatus$neq] 
         * @param {string} [filterStatus$contains] 
         * @param {string} [filterStatus$startsWith] 
         * @param {string} [filterStatus$nstartsWith] 
         * @param {string} [filterStatus$endsWith] 
         * @param {string} [filterStatus$nendsWith] 
         * @param {Array<string>} [filterStatus$in] 
         * @param {Array<string>} [filterStatus$nin] 
         * @param {boolean} [filterStatus$null] 
         * @param {boolean} [filterStatus$nnull] 
         * @param {boolean} [filterStatus$empty] 
         * @param {boolean} [filterStatus$nempty] 
         * @param {string} [filterStatus$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceListBanner: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterStatus$eq?: string, filterStatus$neq?: string, filterStatus$contains?: string, filterStatus$startsWith?: string, filterStatus$nstartsWith?: string, filterStatus$endsWith?: string, filterStatus$nendsWith?: string, filterStatus$in?: Array<string>, filterStatus$nin?: Array<string>, filterStatus$null?: boolean, filterStatus$nnull?: boolean, filterStatus$empty?: boolean, filterStatus$nempty?: boolean, filterStatus$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ticketing/banner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterStatus$eq !== undefined) {
                localVarQueryParameter['filter.status.$eq'] = filterStatus$eq;
            }

            if (filterStatus$neq !== undefined) {
                localVarQueryParameter['filter.status.$neq'] = filterStatus$neq;
            }

            if (filterStatus$contains !== undefined) {
                localVarQueryParameter['filter.status.$contains'] = filterStatus$contains;
            }

            if (filterStatus$startsWith !== undefined) {
                localVarQueryParameter['filter.status.$starts_with'] = filterStatus$startsWith;
            }

            if (filterStatus$nstartsWith !== undefined) {
                localVarQueryParameter['filter.status.$nstarts_with'] = filterStatus$nstartsWith;
            }

            if (filterStatus$endsWith !== undefined) {
                localVarQueryParameter['filter.status.$ends_with'] = filterStatus$endsWith;
            }

            if (filterStatus$nendsWith !== undefined) {
                localVarQueryParameter['filter.status.$nends_with'] = filterStatus$nendsWith;
            }

            if (filterStatus$in) {
                localVarQueryParameter['filter.status.$in'] = filterStatus$in;
            }

            if (filterStatus$nin) {
                localVarQueryParameter['filter.status.$nin'] = filterStatus$nin;
            }

            if (filterStatus$null !== undefined) {
                localVarQueryParameter['filter.status.$null'] = filterStatus$null;
            }

            if (filterStatus$nnull !== undefined) {
                localVarQueryParameter['filter.status.$nnull'] = filterStatus$nnull;
            }

            if (filterStatus$empty !== undefined) {
                localVarQueryParameter['filter.status.$empty'] = filterStatus$empty;
            }

            if (filterStatus$nempty !== undefined) {
                localVarQueryParameter['filter.status.$nempty'] = filterStatus$nempty;
            }

            if (filterStatus$like !== undefined) {
                localVarQueryParameter['filter.status.$like'] = filterStatus$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceListBanner2: async (body: V1ListBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingBannerServiceListBanner2', 'body', body)
            const localVarPath = `/v1/ticketing/banner/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bannerId 
         * @param {TicketingBannerServiceUpdateBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceUpdateBanner: async (bannerId: string, body: TicketingBannerServiceUpdateBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bannerId' is not null or undefined
            assertParamExists('ticketingBannerServiceUpdateBanner', 'bannerId', bannerId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingBannerServiceUpdateBanner', 'body', body)
            const localVarPath = `/v1/ticketing/banner/{banner.id}`
                .replace(`{${"banner.id"}}`, encodeURIComponent(String(bannerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bannerId 
         * @param {TicketingBannerServiceUpdateBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceUpdateBanner2: async (bannerId: string, body: TicketingBannerServiceUpdateBannerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bannerId' is not null or undefined
            assertParamExists('ticketingBannerServiceUpdateBanner2', 'bannerId', bannerId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingBannerServiceUpdateBanner2', 'body', body)
            const localVarPath = `/v1/ticketing/banner/{banner.id}`
                .replace(`{${"banner.id"}}`, encodeURIComponent(String(bannerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketingBannerServiceApi - functional programming interface
 * @export
 */
export const TicketingBannerServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketingBannerServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingBannerServiceCreateBanner(body: V1CreateBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Banner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingBannerServiceCreateBanner(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingBannerServiceDeleteBanner(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteBannerReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingBannerServiceDeleteBanner(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterStatus$eq] 
         * @param {string} [filterStatus$neq] 
         * @param {string} [filterStatus$contains] 
         * @param {string} [filterStatus$startsWith] 
         * @param {string} [filterStatus$nstartsWith] 
         * @param {string} [filterStatus$endsWith] 
         * @param {string} [filterStatus$nendsWith] 
         * @param {Array<string>} [filterStatus$in] 
         * @param {Array<string>} [filterStatus$nin] 
         * @param {boolean} [filterStatus$null] 
         * @param {boolean} [filterStatus$nnull] 
         * @param {boolean} [filterStatus$empty] 
         * @param {boolean} [filterStatus$nempty] 
         * @param {string} [filterStatus$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingBannerServiceListBanner(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterStatus$eq?: string, filterStatus$neq?: string, filterStatus$contains?: string, filterStatus$startsWith?: string, filterStatus$nstartsWith?: string, filterStatus$endsWith?: string, filterStatus$nendsWith?: string, filterStatus$in?: Array<string>, filterStatus$nin?: Array<string>, filterStatus$null?: boolean, filterStatus$nnull?: boolean, filterStatus$empty?: boolean, filterStatus$nempty?: boolean, filterStatus$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListBannerReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingBannerServiceListBanner(pageOffset, pageSize, search, sort, fields, filterStatus$eq, filterStatus$neq, filterStatus$contains, filterStatus$startsWith, filterStatus$nstartsWith, filterStatus$endsWith, filterStatus$nendsWith, filterStatus$in, filterStatus$nin, filterStatus$null, filterStatus$nnull, filterStatus$empty, filterStatus$nempty, filterStatus$like, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1ListBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingBannerServiceListBanner2(body: V1ListBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListBannerReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingBannerServiceListBanner2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bannerId 
         * @param {TicketingBannerServiceUpdateBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingBannerServiceUpdateBanner(bannerId: string, body: TicketingBannerServiceUpdateBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Banner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingBannerServiceUpdateBanner(bannerId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bannerId 
         * @param {TicketingBannerServiceUpdateBannerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingBannerServiceUpdateBanner2(bannerId: string, body: TicketingBannerServiceUpdateBannerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Banner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingBannerServiceUpdateBanner2(bannerId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketingBannerServiceApi - factory interface
 * @export
 */
export const TicketingBannerServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketingBannerServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {TicketingBannerServiceApiTicketingBannerServiceCreateBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceCreateBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceCreateBannerRequest, options?: AxiosRequestConfig): AxiosPromise<V1Banner> {
            return localVarFp.ticketingBannerServiceCreateBanner(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketingBannerServiceApiTicketingBannerServiceDeleteBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceDeleteBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceDeleteBannerRequest, options?: AxiosRequestConfig): AxiosPromise<V1DeleteBannerReply> {
            return localVarFp.ticketingBannerServiceDeleteBanner(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketingBannerServiceApiTicketingBannerServiceListBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceListBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceListBannerRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListBannerReply> {
            return localVarFp.ticketingBannerServiceListBanner(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterStatus$eq, requestParameters.filterStatus$neq, requestParameters.filterStatus$contains, requestParameters.filterStatus$startsWith, requestParameters.filterStatus$nstartsWith, requestParameters.filterStatus$endsWith, requestParameters.filterStatus$nendsWith, requestParameters.filterStatus$in, requestParameters.filterStatus$nin, requestParameters.filterStatus$null, requestParameters.filterStatus$nnull, requestParameters.filterStatus$empty, requestParameters.filterStatus$nempty, requestParameters.filterStatus$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketingBannerServiceApiTicketingBannerServiceListBanner2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceListBanner2(requestParameters: TicketingBannerServiceApiTicketingBannerServiceListBanner2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListBannerReply> {
            return localVarFp.ticketingBannerServiceListBanner2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketingBannerServiceApiTicketingBannerServiceUpdateBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceUpdateBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceUpdateBannerRequest, options?: AxiosRequestConfig): AxiosPromise<V1Banner> {
            return localVarFp.ticketingBannerServiceUpdateBanner(requestParameters.bannerId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingBannerServiceUpdateBanner2(requestParameters: TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2Request, options?: AxiosRequestConfig): AxiosPromise<V1Banner> {
            return localVarFp.ticketingBannerServiceUpdateBanner2(requestParameters.bannerId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ticketingBannerServiceCreateBanner operation in TicketingBannerServiceApi.
 * @export
 * @interface TicketingBannerServiceApiTicketingBannerServiceCreateBannerRequest
 */
export interface TicketingBannerServiceApiTicketingBannerServiceCreateBannerRequest {
    /**
     * 
     * @type {V1CreateBannerRequest}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceCreateBanner
     */
    readonly body: V1CreateBannerRequest
}

/**
 * Request parameters for ticketingBannerServiceDeleteBanner operation in TicketingBannerServiceApi.
 * @export
 * @interface TicketingBannerServiceApiTicketingBannerServiceDeleteBannerRequest
 */
export interface TicketingBannerServiceApiTicketingBannerServiceDeleteBannerRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceDeleteBanner
     */
    readonly id: string
}

/**
 * Request parameters for ticketingBannerServiceListBanner operation in TicketingBannerServiceApi.
 * @export
 * @interface TicketingBannerServiceApiTicketingBannerServiceListBannerRequest
 */
export interface TicketingBannerServiceApiTicketingBannerServiceListBannerRequest {
    /**
     * 
     * @type {number}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner
     */
    readonly filterStatus$like?: string
}

/**
 * Request parameters for ticketingBannerServiceListBanner2 operation in TicketingBannerServiceApi.
 * @export
 * @interface TicketingBannerServiceApiTicketingBannerServiceListBanner2Request
 */
export interface TicketingBannerServiceApiTicketingBannerServiceListBanner2Request {
    /**
     * 
     * @type {V1ListBannerRequest}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceListBanner2
     */
    readonly body: V1ListBannerRequest
}

/**
 * Request parameters for ticketingBannerServiceUpdateBanner operation in TicketingBannerServiceApi.
 * @export
 * @interface TicketingBannerServiceApiTicketingBannerServiceUpdateBannerRequest
 */
export interface TicketingBannerServiceApiTicketingBannerServiceUpdateBannerRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceUpdateBanner
     */
    readonly bannerId: string

    /**
     * 
     * @type {TicketingBannerServiceUpdateBannerRequest}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceUpdateBanner
     */
    readonly body: TicketingBannerServiceUpdateBannerRequest
}

/**
 * Request parameters for ticketingBannerServiceUpdateBanner2 operation in TicketingBannerServiceApi.
 * @export
 * @interface TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2Request
 */
export interface TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2Request {
    /**
     * 
     * @type {string}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2
     */
    readonly bannerId: string

    /**
     * 
     * @type {TicketingBannerServiceUpdateBannerRequest}
     * @memberof TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2
     */
    readonly body: TicketingBannerServiceUpdateBannerRequest
}

/**
 * TicketingBannerServiceApi - object-oriented interface
 * @export
 * @class TicketingBannerServiceApi
 * @extends {BaseAPI}
 */
export class TicketingBannerServiceApi extends BaseAPI {
    /**
     * 
     * @param {TicketingBannerServiceApiTicketingBannerServiceCreateBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingBannerServiceApi
     */
    public ticketingBannerServiceCreateBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceCreateBannerRequest, options?: AxiosRequestConfig) {
        return TicketingBannerServiceApiFp(this.configuration).ticketingBannerServiceCreateBanner(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingBannerServiceApiTicketingBannerServiceDeleteBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingBannerServiceApi
     */
    public ticketingBannerServiceDeleteBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceDeleteBannerRequest, options?: AxiosRequestConfig) {
        return TicketingBannerServiceApiFp(this.configuration).ticketingBannerServiceDeleteBanner(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingBannerServiceApiTicketingBannerServiceListBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingBannerServiceApi
     */
    public ticketingBannerServiceListBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceListBannerRequest = {}, options?: AxiosRequestConfig) {
        return TicketingBannerServiceApiFp(this.configuration).ticketingBannerServiceListBanner(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterStatus$eq, requestParameters.filterStatus$neq, requestParameters.filterStatus$contains, requestParameters.filterStatus$startsWith, requestParameters.filterStatus$nstartsWith, requestParameters.filterStatus$endsWith, requestParameters.filterStatus$nendsWith, requestParameters.filterStatus$in, requestParameters.filterStatus$nin, requestParameters.filterStatus$null, requestParameters.filterStatus$nnull, requestParameters.filterStatus$empty, requestParameters.filterStatus$nempty, requestParameters.filterStatus$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingBannerServiceApiTicketingBannerServiceListBanner2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingBannerServiceApi
     */
    public ticketingBannerServiceListBanner2(requestParameters: TicketingBannerServiceApiTicketingBannerServiceListBanner2Request, options?: AxiosRequestConfig) {
        return TicketingBannerServiceApiFp(this.configuration).ticketingBannerServiceListBanner2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingBannerServiceApiTicketingBannerServiceUpdateBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingBannerServiceApi
     */
    public ticketingBannerServiceUpdateBanner(requestParameters: TicketingBannerServiceApiTicketingBannerServiceUpdateBannerRequest, options?: AxiosRequestConfig) {
        return TicketingBannerServiceApiFp(this.configuration).ticketingBannerServiceUpdateBanner(requestParameters.bannerId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingBannerServiceApi
     */
    public ticketingBannerServiceUpdateBanner2(requestParameters: TicketingBannerServiceApiTicketingBannerServiceUpdateBanner2Request, options?: AxiosRequestConfig) {
        return TicketingBannerServiceApiFp(this.configuration).ticketingBannerServiceUpdateBanner2(requestParameters.bannerId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
